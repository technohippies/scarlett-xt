This does not work
import { defineWxtModule } from 'wxt';
import { resolve, relative } from 'node:path';
import fg from 'fast-glob';

export default defineWxtModule((wxt: any) => {
  // Define the source directory within node_modules
  // Adjust this path if @electric-sql/pglite changes its structure
  const pgliteNodeModulesDir = resolve(wxt.config.root, 'node_modules/@electric-sql/pglite');
  // Find the main package dist directory more reliably
  const pgliteDistDir = resolve(pgliteNodeModulesDir, 'dist');

  // Define the target directory within the extension's output
  const targetDir = 'electric-sql';

  // Explicitly type hook parameters as any to bypass linter errors
  wxt.hooks.hook('build:publicAssets', async (ctx: any, assets: any[]) => {
    wxt.logger.info(`Preparing PGlite files for web accessible resources...`);

    try {
      const filesToCopy = await fg('**/*', {
        cwd: pgliteDistDir,
        absolute: true,
        onlyFiles: true,
        ignore: ['**/*.map', '**/*.d.ts', '**/*.d.mts'], // Ignore map and definition files
      });

      if (filesToCopy.length === 0) {
          wxt.logger.warn(`No PGlite files found in ${pgliteDistDir} to copy.`);
          return;
      }

      wxt.logger.info(`Found ${filesToCopy.length} PGlite files to copy.`);

      for (const absoluteSrc of filesToCopy) {
        // Calculate the destination path relative to the pgliteDistDir
        const relativeSrc = relative(pgliteDistDir, absoluteSrc);
        const relativeDest = `${targetDir}/${relativeSrc}`;

        assets.push({
          absoluteSrc,
          relativeDest,
        });
        // console.log(`  - Added ${relativeSrc} -> ${relativeDest}`); // Verbose logging if needed
      }
       wxt.logger.success(`Successfully added ${filesToCopy.length} PGlite files to public assets.`);

    } catch (error) {
        wxt.logger.error(`Error finding or adding PGlite files:`, error);
    }
  });
}); 